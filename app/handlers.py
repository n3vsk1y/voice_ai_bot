import os
import subprocess
import uuid
import logging

from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import CommandStart

import openai

from app.config import settings
from app.assistant import generate_speech, get_assistant_response

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("AI BOT")

router = Router()


@router.message(CommandStart())
async def on_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏! üéôÔ∏è")


@router.message(F.voice)
async def voice_message(message: Message):
    wait_message = await message.answer("‚è≥ –î—É–º–∞—é...")
    file = await message.bot.get_file(message.voice.file_id)

    filename = str(uuid.uuid4())
    ogg_path = os.path.join("temp", f"{filename}.ogg")
    wav_path = os.path.join("temp", f"{filename}.wav")

    os.makedirs("temp", exist_ok=True)
    await message.bot.download_file(file.file_path, ogg_path)

    try:
        subprocess.run([
            settings.FFMPEG_PATH, "-i", ogg_path, wav_path
        ], check=True)
        logger.info("‚úÖ SUCCESS CONVERT ‚úÖ")
    except (FileNotFoundError, subprocess.CalledProcessError) as e:
        logger.error(f"‚õî FFmpeg ERROR: {e}")
        await wait_message.delete()
        return await message.answer("‚õî –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")

    try:
        with open(wav_path, "rb") as audio_file:
            response = openai.audio.transcriptions.create(
                model="whisper-1", file=audio_file, response_format="text"
            )
    except Exception as e:
        logger.error(f"‚õî TRANSCRIPTION ERROR: {e}")
        await wait_message.delete()
        return await message.answer("‚õî –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∞—É–¥–∏–æ")

    if not response.strip():
        logger.warning("‚õî EMPTY QUESTION ‚õî")
        await wait_message.delete()
        return await message.answer("‚õî –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ")

    try:
        text_response = await get_assistant_response(message.from_user.id, response)
        audio_path = await generate_speech(text_response, filename)
    except Exception as e:
        logger.error(f"‚õî GPT ERROR: {e}")
        await wait_message.delete()
        return await message.answer("‚õî –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞")

    await wait_message.delete()

    if audio_path:
        voice_file = FSInputFile(audio_path)
        await message.reply_voice(voice=voice_file)
        os.remove(audio_path)
    else:
        await message.answer(text_response)

    os.remove(ogg_path)
    os.remove(wav_path)
